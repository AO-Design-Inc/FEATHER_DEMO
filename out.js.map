{
  "version": 3,
  "sources": ["webgl-utils.js", "m4.js", "GL/a.js"],
  "sourcesContent": ["/*\n * Copyright 2021 GFXFundamentals.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of GFXFundamentals. nor the names of his\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function(root, factory) {  // eslint-disable-line\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define([], function() {\n        return factory.call(root);\n      });\n    } else {\n      // Browser globals\n      root.webglUtils = factory.call(root);\n    }\n  }(this, function() {\n    'use strict';\n  \n    const topWindow = this;\n  \n    /** @module webgl-utils */\n  \n    function isInIFrame(w) {\n      w = w || topWindow;\n      return w !== w.top;\n    }\n  \n    if (!isInIFrame()) {\n      console.log(\"%c%s\", 'color:blue;font-weight:bold;', 'for more about webgl-utils.js see:');  // eslint-disable-line\n      console.log(\"%c%s\", 'color:blue;font-weight:bold;', 'https://webglfundamentals.org/webgl/lessons/webgl-boilerplate.html');  // eslint-disable-line\n    }\n  \n    /**\n     * Wrapped logging function.\n     * @param {string} msg The message to log.\n     */\n    function error(msg) {\n      if (topWindow.console) {\n        if (topWindow.console.error) {\n          topWindow.console.error(msg);\n        } else if (topWindow.console.log) {\n          topWindow.console.log(msg);\n        }\n      }\n    }\n  \n  \n    /**\n     * Error Callback\n     * @callback ErrorCallback\n     * @param {string} msg error message.\n     * @memberOf module:webgl-utils\n     */\n  \n  \n    /**\n     * Loads a shader.\n     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n     * @param {string} shaderSource The shader source.\n     * @param {number} shaderType The type of shader.\n     * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\n     * @return {WebGLShader} The created shader.\n     */\n    function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n      const errFn = opt_errorCallback || error;\n      // Create the shader object\n      const shader = gl.createShader(shaderType);\n  \n      // Load the shader source\n      gl.shaderSource(shader, shaderSource);\n  \n      // Compile the shader\n      gl.compileShader(shader);\n  \n      // Check the compile status\n      const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n      if (!compiled) {\n        // Something went wrong during compilation; get the error\n        const lastError = gl.getShaderInfoLog(shader);\n        errFn('*** Error compiling shader \\'' + shader + '\\':' + lastError + `\\n` + shaderSource.split('\\n').map((l,i) => `${i + 1}: ${l}`).join('\\n'));\n        gl.deleteShader(shader);\n        return null;\n      }\n  \n      return shader;\n    }\n  \n    /**\n     * Creates a program, attaches shaders, binds attrib locations, links the\n     * program and calls useProgram.\n     * @param {WebGLShader[]} shaders The shaders to attach\n     * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n     * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n     * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n     *        on error. If you want something else pass an callback. It's passed an error message.\n     * @memberOf module:webgl-utils\n     */\n    function createProgram(\n        gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n      const errFn = opt_errorCallback || error;\n      const program = gl.createProgram();\n      shaders.forEach(function(shader) {\n        gl.attachShader(program, shader);\n      });\n      if (opt_attribs) {\n        opt_attribs.forEach(function(attrib, ndx) {\n          gl.bindAttribLocation(\n              program,\n              opt_locations ? opt_locations[ndx] : ndx,\n              attrib);\n        });\n      }\n      gl.linkProgram(program);\n  \n      // Check the link status\n      const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n      if (!linked) {\n          // something went wrong with the link\n          const lastError = gl.getProgramInfoLog(program);\n          errFn('Error in program linking:' + lastError);\n  \n          gl.deleteProgram(program);\n          return null;\n      }\n      return program;\n    }\n  \n    /**\n     * Loads a shader from a script tag.\n     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n     * @param {string} scriptId The id of the script tag.\n     * @param {number} opt_shaderType The type of shader. If not passed in it will\n     *     be derived from the type of the script tag.\n     * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\n     * @return {WebGLShader} The created shader.\n     */\n    function createShaderFromScript(\n        gl, scriptId, opt_shaderType, opt_errorCallback) {\n      let shaderSource = '';\n      let shaderType;\n      const shaderScript = document.getElementById(scriptId);\n      if (!shaderScript) {\n        throw ('*** Error: unknown script element' + scriptId);\n      }\n      shaderSource = shaderScript.text;\n  \n      if (!opt_shaderType) {\n        if (shaderScript.type === 'x-shader/x-vertex') {\n          shaderType = gl.VERTEX_SHADER;\n        } else if (shaderScript.type === 'x-shader/x-fragment') {\n          shaderType = gl.FRAGMENT_SHADER;\n        } else if (shaderType !== gl.VERTEX_SHADER && shaderType !== gl.FRAGMENT_SHADER) {\n          throw ('*** Error: unknown shader type');\n        }\n      }\n  \n      return loadShader(\n          gl, shaderSource, opt_shaderType ? opt_shaderType : shaderType,\n          opt_errorCallback);\n    }\n  \n    const defaultShaderType = [\n      'VERTEX_SHADER',\n      'FRAGMENT_SHADER',\n    ];\n  \n    /**\n     * Creates a program from 2 script tags.\n     *\n     * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n     *        to use.\n     * @param {string[]} shaderScriptIds Array of ids of the script\n     *        tags for the shaders. The first is assumed to be the\n     *        vertex shader, the second the fragment shader.\n     * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n     * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n     * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n     *        on error. If you want something else pass an callback. It's passed an error message.\n     * @return {WebGLProgram} The created program.\n     * @memberOf module:webgl-utils\n     */\n    function createProgramFromScripts(\n        gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n      const shaders = [];\n      for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n        shaders.push(createShaderFromScript(\n            gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], opt_errorCallback));\n      }\n      return createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback);\n    }\n  \n    /**\n     * Creates a program from 2 sources.\n     *\n     * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n     *        to use.\n     * @param {string[]} shaderSourcess Array of sources for the\n     *        shaders. The first is assumed to be the vertex shader,\n     *        the second the fragment shader.\n     * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n     * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n     * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n     *        on error. If you want something else pass an callback. It's passed an error message.\n     * @return {WebGLProgram} The created program.\n     * @memberOf module:webgl-utils\n     */\n    function createProgramFromSources(\n        gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n      const shaders = [];\n      for (let ii = 0; ii < shaderSources.length; ++ii) {\n        shaders.push(loadShader(\n            gl, shaderSources[ii], gl[defaultShaderType[ii]], opt_errorCallback));\n      }\n      return createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback);\n    }\n  \n    /**\n     * Returns the corresponding bind point for a given sampler type\n     */\n    function getBindPointForSamplerType(gl, type) {\n      if (type === gl.SAMPLER_2D)   return gl.TEXTURE_2D;        // eslint-disable-line\n      if (type === gl.SAMPLER_CUBE) return gl.TEXTURE_CUBE_MAP;  // eslint-disable-line\n      return undefined;\n    }\n  \n    /**\n     * @typedef {Object.<string, function>} Setters\n     */\n  \n    /**\n     * Creates setter functions for all uniforms of a shader\n     * program.\n     *\n     * @see {@link module:webgl-utils.setUniforms}\n     *\n     * @param {WebGLProgram} program the program to create setters for.\n     * @returns {Object.<string, function>} an object with a setter by name for each uniform\n     * @memberOf module:webgl-utils\n     */\n    function createUniformSetters(gl, program) {\n      let textureUnit = 0;\n  \n      /**\n       * Creates a setter for a uniform of the given program with it's\n       * location embedded in the setter.\n       * @param {WebGLProgram} program\n       * @param {WebGLUniformInfo} uniformInfo\n       * @returns {function} the created setter.\n       */\n      function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const type = uniformInfo.type;\n        // Check if this uniform is an array\n        const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        if (type === gl.FLOAT && isArray) {\n          return function(v) {\n            gl.uniform1fv(location, v);\n          };\n        }\n        if (type === gl.FLOAT) {\n          return function(v) {\n            gl.uniform1f(location, v);\n          };\n        }\n        if (type === gl.FLOAT_VEC2) {\n          return function(v) {\n            gl.uniform2fv(location, v);\n          };\n        }\n        if (type === gl.FLOAT_VEC3) {\n          return function(v) {\n            gl.uniform3fv(location, v);\n          };\n        }\n        if (type === gl.FLOAT_VEC4) {\n          return function(v) {\n            gl.uniform4fv(location, v);\n          };\n        }\n        if (type === gl.INT && isArray) {\n          return function(v) {\n            gl.uniform1iv(location, v);\n          };\n        }\n        if (type === gl.INT) {\n          return function(v) {\n            gl.uniform1i(location, v);\n          };\n        }\n        if (type === gl.INT_VEC2) {\n          return function(v) {\n            gl.uniform2iv(location, v);\n          };\n        }\n        if (type === gl.INT_VEC3) {\n          return function(v) {\n            gl.uniform3iv(location, v);\n          };\n        }\n        if (type === gl.INT_VEC4) {\n          return function(v) {\n            gl.uniform4iv(location, v);\n          };\n        }\n        if (type === gl.BOOL) {\n          return function(v) {\n            gl.uniform1iv(location, v);\n          };\n        }\n        if (type === gl.BOOL_VEC2) {\n          return function(v) {\n            gl.uniform2iv(location, v);\n          };\n        }\n        if (type === gl.BOOL_VEC3) {\n          return function(v) {\n            gl.uniform3iv(location, v);\n          };\n        }\n        if (type === gl.BOOL_VEC4) {\n          return function(v) {\n            gl.uniform4iv(location, v);\n          };\n        }\n        if (type === gl.FLOAT_MAT2) {\n          return function(v) {\n            gl.uniformMatrix2fv(location, false, v);\n          };\n        }\n        if (type === gl.FLOAT_MAT3) {\n          return function(v) {\n            gl.uniformMatrix3fv(location, false, v);\n          };\n        }\n        if (type === gl.FLOAT_MAT4) {\n          return function(v) {\n            gl.uniformMatrix4fv(location, false, v);\n          };\n        }\n        if ((type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) && isArray) {\n          const units = [];\n          for (let ii = 0; ii < info.size; ++ii) {\n            units.push(textureUnit++);\n          }\n          return function(bindPoint, units) {\n            return function(textures) {\n              gl.uniform1iv(location, units);\n              textures.forEach(function(texture, index) {\n                gl.activeTexture(gl.TEXTURE0 + units[index]);\n                gl.bindTexture(bindPoint, texture);\n              });\n            };\n          }(getBindPointForSamplerType(gl, type), units);\n        }\n        if (type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) {\n          return function(bindPoint, unit) {\n            return function(texture) {\n              gl.uniform1i(location, unit);\n              gl.activeTexture(gl.TEXTURE0 + unit);\n              gl.bindTexture(bindPoint, texture);\n            };\n          }(getBindPointForSamplerType(gl, type), textureUnit++);\n        }\n        throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n      }\n  \n      const uniformSetters = { };\n      const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n  \n      for (let ii = 0; ii < numUniforms; ++ii) {\n        const uniformInfo = gl.getActiveUniform(program, ii);\n        if (!uniformInfo) {\n          break;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n          name = name.substr(0, name.length - 3);\n        }\n        const setter = createUniformSetter(program, uniformInfo);\n        uniformSetters[name] = setter;\n      }\n      return uniformSetters;\n    }\n  \n    /**\n     * Set uniforms and binds related textures.\n     *\n     * Example:\n     *\n     *     let programInfo = createProgramInfo(\n     *         gl, [\"some-vs\", \"some-fs\"]);\n     *\n     *     let tex1 = gl.createTexture();\n     *     let tex2 = gl.createTexture();\n     *\n     *     ... assume we setup the textures with data ...\n     *\n     *     let uniforms = {\n     *       u_someSampler: tex1,\n     *       u_someOtherSampler: tex2,\n     *       u_someColor: [1,0,0,1],\n     *       u_somePosition: [0,1,1],\n     *       u_someMatrix: [\n     *         1,0,0,0,\n     *         0,1,0,0,\n     *         0,0,1,0,\n     *         0,0,0,0,\n     *       ],\n     *     };\n     *\n     *     gl.useProgram(program);\n     *\n     * This will automatically bind the textures AND set the\n     * uniforms.\n     *\n     *     setUniforms(programInfo.uniformSetters, uniforms);\n     *\n     * For the example above it is equivalent to\n     *\n     *     let texUnit = 0;\n     *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n     *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n     *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n     *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n     *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n     *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n     *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n     *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n     *     gl.uniformMatrix4fv(u_someMatrix, false, [\n     *         1,0,0,0,\n     *         0,1,0,0,\n     *         0,0,1,0,\n     *         0,0,0,0,\n     *       ]);\n     *\n     * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n     *\n     *     let uniforms = {\n     *       u_someSampler: tex1,\n     *       u_someOtherSampler: tex2,\n     *     };\n     *\n     *     let moreUniforms {\n     *       u_someColor: [1,0,0,1],\n     *       u_somePosition: [0,1,1],\n     *       u_someMatrix: [\n     *         1,0,0,0,\n     *         0,1,0,0,\n     *         0,0,1,0,\n     *         0,0,0,0,\n     *       ],\n     *     };\n     *\n     *     setUniforms(programInfo.uniformSetters, uniforms);\n     *     setUniforms(programInfo.uniformSetters, moreUniforms);\n     *\n     * @param {Object.<string, function>|module:webgl-utils.ProgramInfo} setters the setters returned from\n     *        `createUniformSetters` or a ProgramInfo from {@link module:webgl-utils.createProgramInfo}.\n     * @param {Object.<string, value>} an object with values for the\n     *        uniforms.\n     * @memberOf module:webgl-utils\n     */\n    function setUniforms(setters, ...values) {\n      setters = setters.uniformSetters || setters;\n      for (const uniforms of values) {\n        Object.keys(uniforms).forEach(function(name) {\n          const setter = setters[name];\n          if (setter) {\n            setter(uniforms[name]);\n          }\n        });\n      }\n    }\n  \n    /**\n     * Creates setter functions for all attributes of a shader\n     * program. You can pass this to {@link module:webgl-utils.setBuffersAndAttributes} to set all your buffers and attributes.\n     *\n     * @see {@link module:webgl-utils.setAttributes} for example\n     * @param {WebGLProgram} program the program to create setters for.\n     * @return {Object.<string, function>} an object with a setter for each attribute by name.\n     * @memberOf module:webgl-utils\n     */\n    function createAttributeSetters(gl, program) {\n      const attribSetters = {\n      };\n  \n      function createAttribSetter(index) {\n        return function(b) {\n            if (b.value) {\n              gl.disableVertexAttribArray(index);\n              switch (b.value.length) {\n                case 4:\n                  gl.vertexAttrib4fv(index, b.value);\n                  break;\n                case 3:\n                  gl.vertexAttrib3fv(index, b.value);\n                  break;\n                case 2:\n                  gl.vertexAttrib2fv(index, b.value);\n                  break;\n                case 1:\n                  gl.vertexAttrib1fv(index, b.value);\n                  break;\n                default:\n                  throw new Error('the length of a float constant value must be between 1 and 4!');\n              }\n            } else {\n              gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n              gl.enableVertexAttribArray(index);\n              gl.vertexAttribPointer(\n                  index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n            }\n          };\n      }\n  \n      const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n      for (let ii = 0; ii < numAttribs; ++ii) {\n        const attribInfo = gl.getActiveAttrib(program, ii);\n        if (!attribInfo) {\n          break;\n        }\n        const index = gl.getAttribLocation(program, attribInfo.name);\n        attribSetters[attribInfo.name] = createAttribSetter(index);\n      }\n  \n      return attribSetters;\n    }\n  \n    /**\n     * Sets attributes and binds buffers (deprecated... use {@link module:webgl-utils.setBuffersAndAttributes})\n     *\n     * Example:\n     *\n     *     let program = createProgramFromScripts(\n     *         gl, [\"some-vs\", \"some-fs\"]);\n     *\n     *     let attribSetters = createAttributeSetters(program);\n     *\n     *     let positionBuffer = gl.createBuffer();\n     *     let texcoordBuffer = gl.createBuffer();\n     *\n     *     let attribs = {\n     *       a_position: {buffer: positionBuffer, numComponents: 3},\n     *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n     *     };\n     *\n     *     gl.useProgram(program);\n     *\n     * This will automatically bind the buffers AND set the\n     * attributes.\n     *\n     *     setAttributes(attribSetters, attribs);\n     *\n     * Properties of attribs. For each attrib you can add\n     * properties:\n     *\n     * *   type: the type of data in the buffer. Default = gl.FLOAT\n     * *   normalize: whether or not to normalize the data. Default = false\n     * *   stride: the stride. Default = 0\n     * *   offset: offset into the buffer. Default = 0\n     *\n     * For example if you had 3 value float positions, 2 value\n     * float texcoord and 4 value uint8 colors you'd setup your\n     * attribs like this\n     *\n     *     let attribs = {\n     *       a_position: {buffer: positionBuffer, numComponents: 3},\n     *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n     *       a_color: {\n     *         buffer: colorBuffer,\n     *         numComponents: 4,\n     *         type: gl.UNSIGNED_BYTE,\n     *         normalize: true,\n     *       },\n     *     };\n     *\n     * @param {Object.<string, function>|model:webgl-utils.ProgramInfo} setters Attribute setters as returned from createAttributeSetters or a ProgramInfo as returned {@link module:webgl-utils.createProgramInfo}\n     * @param {Object.<string, module:webgl-utils.AttribInfo>} attribs AttribInfos mapped by attribute name.\n     * @memberOf module:webgl-utils\n     * @deprecated use {@link module:webgl-utils.setBuffersAndAttributes}\n     */\n    function setAttributes(setters, attribs) {\n      setters = setters.attribSetters || setters;\n      Object.keys(attribs).forEach(function(name) {\n        const setter = setters[name];\n        if (setter) {\n          setter(attribs[name]);\n        }\n      });\n    }\n  \n    /**\n     * Creates a vertex array object and then sets the attributes\n     * on it\n     *\n     * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n     *        to use.\n     * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n     * @param {Object.<string, module:webgl-utils.AttribInfo>} attribs AttribInfos mapped by attribute name.\n     * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n     */\n    function createVAOAndSetAttributes(gl, setters, attribs, indices) {\n      const vao = gl.createVertexArray();\n      gl.bindVertexArray(vao);\n      setAttributes(setters, attribs);\n      if (indices) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n      }\n      // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n      // like when creating buffers for other stuff will mess up this VAO's binding\n      gl.bindVertexArray(null);\n      return vao;\n    }\n  \n    /**\n     * Creates a vertex array object and then sets the attributes\n     * on it\n     *\n     * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n     *        to use.\n     * @param {Object.<string, function>| module:webgl-utils.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n     * @param {module:webgl-utils:BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n     * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n     */\n    function createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n      return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n    }\n  \n    /**\n     * @typedef {Object} ProgramInfo\n     * @property {WebGLProgram} program A shader program\n     * @property {Object<string, function>} uniformSetters: object of setters as returned from createUniformSetters,\n     * @property {Object<string, function>} attribSetters: object of setters as returned from createAttribSetters,\n     * @memberOf module:webgl-utils\n     */\n  \n    /**\n     * Creates a ProgramInfo from 2 sources.\n     *\n     * A ProgramInfo contains\n     *\n     *     programInfo = {\n     *        program: WebGLProgram,\n     *        uniformSetters: object of setters as returned from createUniformSetters,\n     *        attribSetters: object of setters as returned from createAttribSetters,\n     *     }\n     *\n     * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n     *        to use.\n     * @param {string[]} shaderSourcess Array of sources for the\n     *        shaders or ids. The first is assumed to be the vertex shader,\n     *        the second the fragment shader.\n     * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n     * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n     * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n     *        on error. If you want something else pass an callback. It's passed an error message.\n     * @return {module:webgl-utils.ProgramInfo} The created program.\n     * @memberOf module:webgl-utils\n     */\n    function createProgramInfo(\n        gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n      shaderSources = shaderSources.map(function(source) {\n        const script = document.getElementById(source);\n        return script ? script.text : source;\n      });\n      const program = createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);\n      if (!program) {\n        return null;\n      }\n      const uniformSetters = createUniformSetters(gl, program);\n      const attribSetters = createAttributeSetters(gl, program);\n      return {\n        program: program,\n        uniformSetters: uniformSetters,\n        attribSetters: attribSetters,\n      };\n    }\n  \n    /**\n     * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n     *\n     * Example:\n     *\n     *     let programInfo = createProgramInfo(\n     *         gl, [\"some-vs\", \"some-fs\"]);\n     *\n     *     let arrays = {\n     *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n     *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n     *     };\n     *\n     *     let bufferInfo = createBufferInfoFromArrays(gl, arrays);\n     *\n     *     gl.useProgram(programInfo.program);\n     *\n     * This will automatically bind the buffers AND set the\n     * attributes.\n     *\n     *     setBuffersAndAttributes(programInfo.attribSetters, bufferInfo);\n     *\n     * For the example above it is equivilent to\n     *\n     *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n     *     gl.enableVertexAttribArray(a_positionLocation);\n     *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n     *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n     *     gl.enableVertexAttribArray(a_texcoordLocation);\n     *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n     *\n     * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n     * @param {Object.<string, function>} setters Attribute setters as returned from `createAttributeSetters`\n     * @param {module:webgl-utils.BufferInfo} buffers a BufferInfo as returned from `createBufferInfoFromArrays`.\n     * @memberOf module:webgl-utils\n     */\n    function setBuffersAndAttributes(gl, setters, buffers) {\n      setAttributes(setters, buffers.attribs);\n      if (buffers.indices) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n      }\n    }\n  \n    // Add your prefix here.\n    const browserPrefixes = [\n      '',\n      'MOZ_',\n      'OP_',\n      'WEBKIT_',\n    ];\n  \n    /**\n     * Given an extension name like WEBGL_compressed_texture_s3tc\n     * returns the supported version extension, like\n     * WEBKIT_WEBGL_compressed_teture_s3tc\n     * @param {string} name Name of extension to look for\n     * @return {WebGLExtension} The extension or undefined if not\n     *     found.\n     * @memberOf module:webgl-utils\n     */\n    function getExtensionWithKnownPrefixes(gl, name) {\n      for (let ii = 0; ii < browserPrefixes.length; ++ii) {\n        const prefixedName = browserPrefixes[ii] + name;\n        const ext = gl.getExtension(prefixedName);\n        if (ext) {\n          return ext;\n        }\n      }\n      return undefined;\n    }\n  \n    /**\n     * Resize a canvas to match the size its displayed.\n     * @param {HTMLCanvasElement} canvas The canvas to resize.\n     * @param {number} [multiplier] amount to multiply by.\n     *    Pass in window.devicePixelRatio for native pixels.\n     * @return {boolean} true if the canvas was resized.\n     * @memberOf module:webgl-utils\n     */\n    function resizeCanvasToDisplaySize(canvas, multiplier) {\n      multiplier = multiplier || 1;\n      const width  = canvas.clientWidth  * multiplier | 0;\n      const height = canvas.clientHeight * multiplier | 0;\n      if (canvas.width !== width ||  canvas.height !== height) {\n        canvas.width  = width;\n        canvas.height = height;\n        return true;\n      }\n      return false;\n    }\n  \n    // Add `push` to a typed array. It just keeps a 'cursor'\n    // and allows use to `push` values into the array so we\n    // don't have to manually compute offsets\n    function augmentTypedArray(typedArray, numComponents) {\n      let cursor = 0;\n      typedArray.push = function() {\n        for (let ii = 0; ii < arguments.length; ++ii) {\n          const value = arguments[ii];\n          if (value instanceof Array || (value.buffer && value.buffer instanceof ArrayBuffer)) {\n            for (let jj = 0; jj < value.length; ++jj) {\n              typedArray[cursor++] = value[jj];\n            }\n          } else {\n            typedArray[cursor++] = value;\n          }\n        }\n      };\n      typedArray.reset = function(opt_index) {\n        cursor = opt_index || 0;\n      };\n      typedArray.numComponents = numComponents;\n      Object.defineProperty(typedArray, 'numElements', {\n        get: function() {\n          return this.length / this.numComponents | 0;\n        },\n      });\n      return typedArray;\n    }\n  \n    /**\n     * creates a typed array with a `push` function attached\n     * so that you can easily *push* values.\n     *\n     * `push` can take multiple arguments. If an argument is an array each element\n     * of the array will be added to the typed array.\n     *\n     * Example:\n     *\n     *     let array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n     *     array.push(1, 2, 3);\n     *     array.push([4, 5, 6]);\n     *     // array now contains [1, 2, 3, 4, 5, 6]\n     *\n     * Also has `numComponents` and `numElements` properties.\n     *\n     * @param {number} numComponents number of components\n     * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n     * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n     * @return {ArrayBuffer} A typed array.\n     * @memberOf module:webgl-utils\n     */\n    function createAugmentedTypedArray(numComponents, numElements, opt_type) {\n      const Type = opt_type || Float32Array;\n      return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n    }\n  \n    function createBufferFromTypedArray(gl, array, type, drawType) {\n      type = type || gl.ARRAY_BUFFER;\n      const buffer = gl.createBuffer();\n      gl.bindBuffer(type, buffer);\n      gl.bufferData(type, array, drawType || gl.STATIC_DRAW);\n      return buffer;\n    }\n  \n    function allButIndices(name) {\n      return name !== 'indices';\n    }\n  \n    function createMapping(obj) {\n      const mapping = {};\n      Object.keys(obj).filter(allButIndices).forEach(function(key) {\n        mapping['a_' + key] = key;\n      });\n      return mapping;\n    }\n  \n    function getGLTypeForTypedArray(gl, typedArray) {\n      if (typedArray instanceof Int8Array)    { return gl.BYTE; }            // eslint-disable-line\n      if (typedArray instanceof Uint8Array)   { return gl.UNSIGNED_BYTE; }   // eslint-disable-line\n      if (typedArray instanceof Int16Array)   { return gl.SHORT; }           // eslint-disable-line\n      if (typedArray instanceof Uint16Array)  { return gl.UNSIGNED_SHORT; }  // eslint-disable-line\n      if (typedArray instanceof Int32Array)   { return gl.INT; }             // eslint-disable-line\n      if (typedArray instanceof Uint32Array)  { return gl.UNSIGNED_INT; }    // eslint-disable-line\n      if (typedArray instanceof Float32Array) { return gl.FLOAT; }           // eslint-disable-line\n      throw 'unsupported typed array type';\n    }\n  \n    // This is really just a guess. Though I can't really imagine using\n    // anything else? Maybe for some compression?\n    function getNormalizationForTypedArray(typedArray) {\n      if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line\n      if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line\n      return false;\n    }\n  \n    function isArrayBuffer(a) {\n      return a.buffer && a.buffer instanceof ArrayBuffer;\n    }\n  \n    function guessNumComponentsFromName(name, length) {\n      let numComponents;\n      if (name.indexOf('coord') >= 0) {\n        numComponents = 2;\n      } else if (name.indexOf('color') >= 0) {\n        numComponents = 4;\n      } else {\n        numComponents = 3;  // position, normals, indices ...\n      }\n  \n      if (length % numComponents > 0) {\n        throw 'can not guess numComponents. You should specify it.';\n      }\n  \n      return numComponents;\n    }\n  \n    function makeTypedArray(array, name) {\n      if (isArrayBuffer(array)) {\n        return array;\n      }\n  \n      if (array.data && isArrayBuffer(array.data)) {\n        return array.data;\n      }\n  \n      if (Array.isArray(array)) {\n        array = {\n          data: array,\n        };\n      }\n  \n      if (!array.numComponents) {\n        array.numComponents = guessNumComponentsFromName(name, array.length);\n      }\n  \n      let type = array.type;\n      if (!type) {\n        if (name === 'indices') {\n          type = Uint16Array;\n        }\n      }\n      const typedArray = createAugmentedTypedArray(array.numComponents, array.data.length / array.numComponents | 0, type);\n      typedArray.push(array.data);\n      return typedArray;\n    }\n  \n    /**\n     * @typedef {Object} AttribInfo\n     * @property {number} [numComponents] the number of components for this attribute.\n     * @property {number} [size] the number of components for this attribute.\n     * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n     * @property {boolean} [normalized] whether or not to normalize the data. Default = false\n     * @property {number} [offset] offset into buffer in bytes. Default = 0\n     * @property {number} [stride] the stride in bytes per element. Default = 0\n     * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n     * @memberOf module:webgl-utils\n     */\n  \n  \n    /**\n     * Creates a set of attribute data and WebGLBuffers from set of arrays\n     *\n     * Given\n     *\n     *      let arrays = {\n     *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n     *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n     *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n     *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n     *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n     *      };\n     *\n     * returns something like\n     *\n     *      let attribs = {\n     *        a_position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n     *        a_texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n     *        a_normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n     *        a_color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n     *      };\n     *\n     * @param {WebGLRenderingContext} gl The webgl rendering context.\n     * @param {Object.<string, array|typedarray>} arrays The arrays\n     * @param {Object.<string, string>} [opt_mapping] mapping from attribute name to array name.\n     *     if not specified defaults to \"a_name\" -> \"name\".\n     * @return {Object.<string, module:webgl-utils.AttribInfo>} the attribs\n     * @memberOf module:webgl-utils\n     */\n    function createAttribsFromArrays(gl, arrays, opt_mapping) {\n      const mapping = opt_mapping || createMapping(arrays);\n      const attribs = {};\n      Object.keys(mapping).forEach(function(attribName) {\n        const bufferName = mapping[attribName];\n        const origArray = arrays[bufferName];\n        if (origArray.value) {\n          attribs[attribName] = {\n            value: origArray.value,\n          };\n        } else {\n          const array = makeTypedArray(origArray, bufferName);\n          attribs[attribName] = {\n            buffer:        createBufferFromTypedArray(gl, array),\n            numComponents: origArray.numComponents || array.numComponents || guessNumComponentsFromName(bufferName),\n            type:          getGLTypeForTypedArray(gl, array),\n            normalize:     getNormalizationForTypedArray(array),\n          };\n        }\n      });\n      return attribs;\n    }\n  \n    function getArray(array) {\n      return array.length ? array : array.data;\n    }\n  \n    const texcoordRE = /coord|texture/i;\n    const colorRE = /color|colour/i;\n  \n    function guessNumComponentsFromName(name, length) {\n      let numComponents;\n      if (texcoordRE.test(name)) {\n        numComponents = 2;\n      } else if (colorRE.test(name)) {\n        numComponents = 4;\n      } else {\n        numComponents = 3;  // position, normals, indices ...\n      }\n  \n      if (length % numComponents > 0) {\n        throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n      }\n  \n      return numComponents;\n    }\n  \n    function getNumComponents(array, arrayName) {\n      return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n    }\n  \n    /**\n     * tries to get the number of elements from a set of arrays.\n     */\n    const positionKeys = ['position', 'positions', 'a_position'];\n    function getNumElementsFromNonIndexedArrays(arrays) {\n      let key;\n      for (const k of positionKeys) {\n        if (k in arrays) {\n          key = k;\n          break;\n        }\n      }\n      key = key || Object.keys(arrays)[0];\n      const array = arrays[key];\n      const length = getArray(array).length;\n      const numComponents = getNumComponents(array, key);\n      const numElements = length / numComponents;\n      if (length % numComponents > 0) {\n        throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n      }\n      return numElements;\n    }\n  \n    /**\n     * @typedef {Object} BufferInfo\n     * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n     * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n     * @property {Object.<string, module:webgl-utils.AttribInfo>} attribs The attribs approriate to call `setAttributes`\n     * @memberOf module:webgl-utils\n     */\n  \n  \n    /**\n     * Creates a BufferInfo from an object of arrays.\n     *\n     * This can be passed to {@link module:webgl-utils.setBuffersAndAttributes} and to\n     * {@link module:webgl-utils:drawBufferInfo}.\n     *\n     * Given an object like\n     *\n     *     let arrays = {\n     *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n     *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n     *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n     *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n     *     };\n     *\n     *  Creates an BufferInfo like this\n     *\n     *     bufferInfo = {\n     *       numElements: 4,        // or whatever the number of elements is\n     *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n     *       attribs: {\n     *         a_position: { buffer: WebGLBuffer, numComponents: 3, },\n     *         a_normal:   { buffer: WebGLBuffer, numComponents: 3, },\n     *         a_texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n     *       },\n     *     };\n     *\n     *  The properties of arrays can be JavaScript arrays in which case the number of components\n     *  will be guessed.\n     *\n     *     let arrays = {\n     *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n     *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n     *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n     *        indices:  [0, 1, 2, 1, 2, 3],\n     *     };\n     *\n     *  They can also by TypedArrays\n     *\n     *     let arrays = {\n     *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n     *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n     *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n     *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n     *     };\n     *\n     *  Or augmentedTypedArrays\n     *\n     *     let positions = createAugmentedTypedArray(3, 4);\n     *     let texcoords = createAugmentedTypedArray(2, 4);\n     *     let normals   = createAugmentedTypedArray(3, 4);\n     *     let indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n     *\n     *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n     *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n     *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n     *     indices.push([0, 1, 2, 1, 2, 3]);\n     *\n     *     let arrays = {\n     *        position: positions,\n     *        texcoord: texcoords,\n     *        normal:   normals,\n     *        indices:  indices,\n     *     };\n     *\n     * For the last example it is equivalent to\n     *\n     *     let bufferInfo = {\n     *       attribs: {\n     *         a_position: { numComponents: 3, buffer: gl.createBuffer(), },\n     *         a_texcoods: { numComponents: 2, buffer: gl.createBuffer(), },\n     *         a_normals: { numComponents: 3, buffer: gl.createBuffer(), },\n     *       },\n     *       indices: gl.createBuffer(),\n     *       numElements: 6,\n     *     };\n     *\n     *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_position.buffer);\n     *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n     *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_texcoord.buffer);\n     *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n     *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_normal.buffer);\n     *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n     *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n     *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n     *\n     * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n     * @param {Object.<string, array|object|typedarray>} arrays Your data\n     * @param {Object.<string, string>} [opt_mapping] an optional mapping of attribute to array name.\n     *    If not passed in it's assumed the array names will be mapped to an attribute\n     *    of the same name with \"a_\" prefixed to it. An other words.\n     *\n     *        let arrays = {\n     *           position: ...,\n     *           texcoord: ...,\n     *           normal:   ...,\n     *           indices:  ...,\n     *        };\n     *\n     *        bufferInfo = createBufferInfoFromArrays(gl, arrays);\n     *\n     *    Is the same as\n     *\n     *        let arrays = {\n     *           position: ...,\n     *           texcoord: ...,\n     *           normal:   ...,\n     *           indices:  ...,\n     *        };\n     *\n     *        let mapping = {\n     *          a_position: \"position\",\n     *          a_texcoord: \"texcoord\",\n     *          a_normal:   \"normal\",\n     *        };\n     *\n     *        bufferInfo = createBufferInfoFromArrays(gl, arrays, mapping);\n     *\n     * @return {module:webgl-utils.BufferInfo} A BufferInfo\n     * @memberOf module:webgl-utils\n     */\n    function createBufferInfoFromArrays(gl, arrays, opt_mapping) {\n      const bufferInfo = {\n        attribs: createAttribsFromArrays(gl, arrays, opt_mapping),\n      };\n      let indices = arrays.indices;\n      if (indices) {\n        indices = makeTypedArray(indices, 'indices');\n        bufferInfo.indices = createBufferFromTypedArray(gl, indices, gl.ELEMENT_ARRAY_BUFFER);\n        bufferInfo.numElements = indices.length;\n      } else {\n        bufferInfo.numElements = getNumElementsFromNonIndexedArrays(arrays);\n      }\n  \n      return bufferInfo;\n    }\n  \n    /**\n     * Creates buffers from typed arrays\n     *\n     * Given something like this\n     *\n     *     let arrays = {\n     *        positions: [1, 2, 3],\n     *        normals: [0, 0, 1],\n     *     }\n     *\n     * returns something like\n     *\n     *     buffers = {\n     *       positions: WebGLBuffer,\n     *       normals: WebGLBuffer,\n     *     }\n     *\n     * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n     *\n     * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n     * @param {Object<string, array|typedarray>} arrays\n     * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n     * @memberOf module:webgl-utils\n     */\n    function createBuffersFromArrays(gl, arrays) {\n      const buffers = { };\n      Object.keys(arrays).forEach(function(key) {\n        const type = key === 'indices' ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;\n        const array = makeTypedArray(arrays[key], name);\n        buffers[key] = createBufferFromTypedArray(gl, array, type);\n      });\n  \n      // hrm\n      if (arrays.indices) {\n        buffers.numElements = arrays.indices.length;\n      } else if (arrays.position) {\n        buffers.numElements = arrays.position.length / 3;\n      }\n  \n      return buffers;\n    }\n  \n    /**\n     * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n     *\n     * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n     * but calling this means if you switch from indexed data to non-indexed\n     * data you don't have to remember to update your draw call.\n     *\n     * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n     * @param {module:webgl-utils.BufferInfo} bufferInfo as returned from createBufferInfoFromArrays\n     * @param {enum} [primitiveType] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...)\n     * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n     * @param {number} [offset] An optional offset. Defaults to 0.\n     * @memberOf module:webgl-utils\n     */\n    function drawBufferInfo(gl, bufferInfo, primitiveType, count, offset) {\n      const indices = bufferInfo.indices;\n      primitiveType = primitiveType === undefined ? gl.TRIANGLES : primitiveType;\n      const numElements = count === undefined ? bufferInfo.numElements : count;\n      offset = offset === undefined ? 0 : offset;\n      if (indices) {\n        gl.drawElements(primitiveType, numElements, gl.UNSIGNED_SHORT, offset);\n      } else {\n        gl.drawArrays(primitiveType, offset, numElements);\n      }\n    }\n  \n    /**\n     * @typedef {Object} DrawObject\n     * @property {module:webgl-utils.ProgramInfo} programInfo A ProgramInfo as returned from createProgramInfo\n     * @property {module:webgl-utils.BufferInfo} bufferInfo A BufferInfo as returned from createBufferInfoFromArrays\n     * @property {Object<string, ?>} uniforms The values for the uniforms\n     * @memberOf module:webgl-utils\n     */\n  \n    /**\n     * Draws a list of objects\n     * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n     * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n     * @memberOf module:webgl-utils\n     */\n    function drawObjectList(gl, objectsToDraw) {\n      let lastUsedProgramInfo = null;\n      let lastUsedBufferInfo = null;\n  \n      objectsToDraw.forEach(function(object) {\n        const programInfo = object.programInfo;\n        const bufferInfo = object.bufferInfo;\n        let bindBuffers = false;\n  \n        if (programInfo !== lastUsedProgramInfo) {\n          lastUsedProgramInfo = programInfo;\n          gl.useProgram(programInfo.program);\n          bindBuffers = true;\n        }\n  \n        // Setup all the needed attributes.\n        if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n          lastUsedBufferInfo = bufferInfo;\n          setBuffersAndAttributes(gl, programInfo.attribSetters, bufferInfo);\n        }\n  \n        // Set the uniforms.\n        setUniforms(programInfo.uniformSetters, object.uniforms);\n  \n        // Draw\n        drawBufferInfo(gl, bufferInfo);\n      });\n    }\n  \n    function glEnumToString(gl, v) {\n      const results = [];\n      for (const key in gl) {\n        if (gl[key] === v) {\n          results.push(key);\n        }\n      }\n      return results.length\n          ? results.join(' | ')\n          : `0x${v.toString(16)}`;\n    }\n  \n    const isIE = /*@cc_on!@*/false || !!document.documentMode;\n    // Edge 20+\n    const isEdge = !isIE && !!window.StyleMedia;\n    if (isEdge) {\n      // Hack for Edge. Edge's WebGL implmentation is crap still and so they\n      // only respond to \"experimental-webgl\". I don't want to clutter the\n      // examples with that so his hack works around it\n      HTMLCanvasElement.prototype.getContext = function(origFn) {\n        return function() {\n          let args = arguments;\n          const type = args[0];\n          if (type === 'webgl') {\n            args = [].slice.call(arguments);\n            args[0] = 'experimental-webgl';\n          }\n          return origFn.apply(this, args);\n        };\n      }(HTMLCanvasElement.prototype.getContext);\n    }\n  \n    return {\n      createAugmentedTypedArray: createAugmentedTypedArray,\n      createAttribsFromArrays: createAttribsFromArrays,\n      createBuffersFromArrays: createBuffersFromArrays,\n      createBufferInfoFromArrays: createBufferInfoFromArrays,\n      createAttributeSetters: createAttributeSetters,\n      createProgram: createProgram,\n      createProgramFromScripts: createProgramFromScripts,\n      createProgramFromSources: createProgramFromSources,\n      createProgramInfo: createProgramInfo,\n      createUniformSetters: createUniformSetters,\n      createVAOAndSetAttributes: createVAOAndSetAttributes,\n      createVAOFromBufferInfo: createVAOFromBufferInfo,\n      drawBufferInfo: drawBufferInfo,\n      drawObjectList: drawObjectList,\n      glEnumToString: glEnumToString,\n      getExtensionWithKnownPrefixes: getExtensionWithKnownPrefixes,\n      resizeCanvasToDisplaySize: resizeCanvasToDisplaySize,\n      setAttributes: setAttributes,\n      setBuffersAndAttributes: setBuffersAndAttributes,\n      setUniforms: setUniforms,\n    };\n  \n  }));\n  \n  ", "/*\n * Copyright 2021, GFXFundamentals.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of GFXFundamentals. nor the names of his\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Various 3d math functions.\n *\n * @module webgl-3d-math\n */\n (function(root, factory) {  // eslint-disable-line\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define([], factory);\n    } else {\n      // Browser globals\n      root.m4 = factory();\n    }\n  }(this, function() {\n    \"use strict\";\n  \n    /**\n     * An array or typed array with 3 values.\n     * @typedef {number[]|TypedArray} Vector3\n     * @memberOf module:webgl-3d-math\n     */\n  \n    /**\n     * An array or typed array with 4 values.\n     * @typedef {number[]|TypedArray} Vector4\n     * @memberOf module:webgl-3d-math\n     */\n  \n    /**\n     * An array or typed array with 16 values.\n     * @typedef {number[]|TypedArray} Matrix4\n     * @memberOf module:webgl-3d-math\n     */\n  \n  \n    let MatType = Float32Array;\n  \n    /**\n     * Sets the type this library creates for a Mat4\n     * @param {constructor} Ctor the constructor for the type. Either `Float32Array` or `Array`\n     * @return {constructor} previous constructor for Mat4\n     */\n    function setDefaultType(Ctor) {\n      const OldType = MatType;\n      MatType = Ctor;\n      return OldType;\n    }\n  \n    /**\n     * Takes two 4-by-4 matrices, a and b, and computes the product in the order\n     * that pre-composes b with a.  In other words, the matrix returned will\n     * transform by b first and then a.  Note this is subtly different from just\n     * multiplying the matrices together.  For given a and b, this function returns\n     * the same object in both row-major and column-major mode.\n     * @param {Matrix4} a A matrix.\n     * @param {Matrix4} b A matrix.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     */\n    function multiply(a, b, dst) {\n      dst = dst || new MatType(16);\n      var b00 = b[0 * 4 + 0];\n      var b01 = b[0 * 4 + 1];\n      var b02 = b[0 * 4 + 2];\n      var b03 = b[0 * 4 + 3];\n      var b10 = b[1 * 4 + 0];\n      var b11 = b[1 * 4 + 1];\n      var b12 = b[1 * 4 + 2];\n      var b13 = b[1 * 4 + 3];\n      var b20 = b[2 * 4 + 0];\n      var b21 = b[2 * 4 + 1];\n      var b22 = b[2 * 4 + 2];\n      var b23 = b[2 * 4 + 3];\n      var b30 = b[3 * 4 + 0];\n      var b31 = b[3 * 4 + 1];\n      var b32 = b[3 * 4 + 2];\n      var b33 = b[3 * 4 + 3];\n      var a00 = a[0 * 4 + 0];\n      var a01 = a[0 * 4 + 1];\n      var a02 = a[0 * 4 + 2];\n      var a03 = a[0 * 4 + 3];\n      var a10 = a[1 * 4 + 0];\n      var a11 = a[1 * 4 + 1];\n      var a12 = a[1 * 4 + 2];\n      var a13 = a[1 * 4 + 3];\n      var a20 = a[2 * 4 + 0];\n      var a21 = a[2 * 4 + 1];\n      var a22 = a[2 * 4 + 2];\n      var a23 = a[2 * 4 + 3];\n      var a30 = a[3 * 4 + 0];\n      var a31 = a[3 * 4 + 1];\n      var a32 = a[3 * 4 + 2];\n      var a33 = a[3 * 4 + 3];\n      dst[ 0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\n      dst[ 1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\n      dst[ 2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\n      dst[ 3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\n      dst[ 4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\n      dst[ 5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\n      dst[ 6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\n      dst[ 7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\n      dst[ 8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\n      dst[ 9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\n      dst[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\n      dst[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\n      dst[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\n      dst[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\n      dst[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\n      dst[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\n      return dst;\n    }\n  \n  \n    /**\n     * adds 2 vectors3s\n     * @param {Vector3} a a\n     * @param {Vector3} b b\n     * @param {Vector3} dst optional vector3 to store result\n     * @return {Vector3} dst or new Vector3 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function addVectors(a, b, dst) {\n      dst = dst || new MatType(3);\n      dst[0] = a[0] + b[0];\n      dst[1] = a[1] + b[1];\n      dst[2] = a[2] + b[2];\n      return dst;\n    }\n  \n    /**\n     * subtracts 2 vectors3s\n     * @param {Vector3} a a\n     * @param {Vector3} b b\n     * @param {Vector3} dst optional vector3 to store result\n     * @return {Vector3} dst or new Vector3 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function subtractVectors(a, b, dst) {\n      dst = dst || new MatType(3);\n      dst[0] = a[0] - b[0];\n      dst[1] = a[1] - b[1];\n      dst[2] = a[2] - b[2];\n      return dst;\n    }\n  \n    /**\n     * scale vectors3\n     * @param {Vector3} v vector\n     * @param {Number} s scale\n     * @param {Vector3} dst optional vector3 to store result\n     * @return {Vector3} dst or new Vector3 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function scaleVector(v, s, dst) {\n      dst = dst || new MatType(3);\n      dst[0] = v[0] * s;\n      dst[1] = v[1] * s;\n      dst[2] = v[2] * s;\n      return dst;\n    }  \n    /**\n     * normalizes a vector.\n     * @param {Vector3} v vector to normalize\n     * @param {Vector3} dst optional vector3 to store result\n     * @return {Vector3} dst or new Vector3 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function normalize(v, dst) {\n      dst = dst || new MatType(3);\n      var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n      // make sure we don't divide by 0.\n      if (length > 0.00001) {\n        dst[0] = v[0] / length;\n        dst[1] = v[1] / length;\n        dst[2] = v[2] / length;\n      }\n      return dst;\n    }\n  \n    /**\n     * Computes the length of a vector\n     * @param {Vector3} v vector to take length of\n     * @return {number} length of vector\n     */\n    function length(v) {\n      return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n    }\n  \n    /**\n     * Computes the length squared of a vector\n     * @param {Vector3} v vector to take length of\n     * @return {number} length sqaured of vector\n     */\n    function lengthSq(v) {\n      return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n    }\n  \n    /**\n     * Computes the cross product of 2 vectors3s\n     * @param {Vector3} a a\n     * @param {Vector3} b b\n     * @param {Vector3} dst optional vector3 to store result\n     * @return {Vector3} dst or new Vector3 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function cross(a, b, dst) {\n      dst = dst || new MatType(3);\n      dst[0] = a[1] * b[2] - a[2] * b[1];\n      dst[1] = a[2] * b[0] - a[0] * b[2];\n      dst[2] = a[0] * b[1] - a[1] * b[0];\n      return dst;\n    }\n  \n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param {Vector3} a Operand vector.\n     * @param {Vector3} b Operand vector.\n     * @return {number} dot product\n     * @memberOf module:webgl-3d-math\n     */\n    function dot(a, b) {\n      return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n    }\n  \n    /**\n     * Computes the distance squared between 2 points\n     * @param {Vector3} a\n     * @param {Vector3} b\n     * @return {number} distance squared between a and b\n     */\n    function distanceSq(a, b) {\n      const dx = a[0] - b[0];\n      const dy = a[1] - b[1];\n      const dz = a[2] - b[2];\n      return dx * dx + dy * dy + dz * dz;\n    }\n  \n    /**\n     * Computes the distance between 2 points\n     * @param {Vector3} a\n     * @param {Vector3} b\n     * @return {number} distance between a and b\n     */\n    function distance(a, b) {\n      return Math.sqrt(distanceSq(a, b));\n    }\n  \n    /**\n     * Makes an identity matrix.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function identity(dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = 1;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = 1;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = 1;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Transposes a matrix.\n     * @param {Matrix4} m matrix to transpose.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function transpose(m, dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = m[0];\n      dst[ 1] = m[4];\n      dst[ 2] = m[8];\n      dst[ 3] = m[12];\n      dst[ 4] = m[1];\n      dst[ 5] = m[5];\n      dst[ 6] = m[9];\n      dst[ 7] = m[13];\n      dst[ 8] = m[2];\n      dst[ 9] = m[6];\n      dst[10] = m[10];\n      dst[11] = m[14];\n      dst[12] = m[3];\n      dst[13] = m[7];\n      dst[14] = m[11];\n      dst[15] = m[15];\n  \n      return dst;\n    }\n  \n    /**\n     * Creates a lookAt matrix.\n     * This is a world matrix for a camera. In other words it will transform\n     * from the origin to a place and orientation in the world. For a view\n     * matrix take the inverse of this.\n     * @param {Vector3} cameraPosition position of the camera\n     * @param {Vector3} target position of the target\n     * @param {Vector3} up direction\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function lookAt(cameraPosition, target, up, dst) {\n      dst = dst || new MatType(16);\n      var zAxis = normalize(\n          subtractVectors(cameraPosition, target));\n      var xAxis = normalize(cross(up, zAxis));\n      var yAxis = normalize(cross(zAxis, xAxis));\n  \n      dst[ 0] = xAxis[0];\n      dst[ 1] = xAxis[1];\n      dst[ 2] = xAxis[2];\n      dst[ 3] = 0;\n      dst[ 4] = yAxis[0];\n      dst[ 5] = yAxis[1];\n      dst[ 6] = yAxis[2];\n      dst[ 7] = 0;\n      dst[ 8] = zAxis[0];\n      dst[ 9] = zAxis[1];\n      dst[10] = zAxis[2];\n      dst[11] = 0;\n      dst[12] = cameraPosition[0];\n      dst[13] = cameraPosition[1];\n      dst[14] = cameraPosition[2];\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from -1 to 1 in the z dimension.\n     * @param {number} fieldOfViewInRadians field of view in y axis.\n     * @param {number} aspect aspect of viewport (width / height)\n     * @param {number} near near Z clipping plane\n     * @param {number} far far Z clipping plane\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function perspective(fieldOfViewInRadians, aspect, near, far, dst) {\n      dst = dst || new MatType(16);\n      var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians);\n      var rangeInv = 1.0 / (near - far);\n  \n      dst[ 0] = f / aspect;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = f;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = (near + far) * rangeInv;\n      dst[11] = -1;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = near * far * rangeInv * 2;\n      dst[15] = 0;\n  \n      return dst;\n    }\n  \n    /**\n     * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\n     * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\n     * generated sends that box to the unit box.  Note that although left and right\n     * are x coordinates and bottom and top are y coordinates, near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\n     * dimensions and from -1 to 1 in the z dimension.\n     * @param {number} left The x coordinate of the left plane of the box.\n     * @param {number} right The x coordinate of the right plane of the box.\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\n     * @param {number} top The y coordinate of the right plane of the box.\n     * @param {number} near The negative z coordinate of the near plane of the box.\n     * @param {number} far The negative z coordinate of the far plane of the box.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function orthographic(left, right, bottom, top, near, far, dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = 2 / (right - left);\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = 2 / (top - bottom);\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = 2 / (near - far);\n      dst[11] = 0;\n      dst[12] = (left + right) / (left - right);\n      dst[13] = (bottom + top) / (bottom - top);\n      dst[14] = (near + far) / (near - far);\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\n     * dimension.\n     * @param {number} left The x coordinate of the left plane of the box.\n     * @param {number} right The x coordinate of the right plane of the box.\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\n     * @param {number} top The y coordinate of the right plane of the box.\n     * @param {number} near The negative z coordinate of the near plane of the box.\n     * @param {number} far The negative z coordinate of the far plane of the box.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function frustum(left, right, bottom, top, near, far, dst) {\n      dst = dst || new MatType(16);\n  \n      var dx = right - left;\n      var dy = top - bottom;\n      var dz = far - near;\n  \n      dst[ 0] = 2 * near / dx;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = 2 * near / dy;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = (left + right) / dx;\n      dst[ 9] = (top + bottom) / dy;\n      dst[10] = -(far + near) / dz;\n      dst[11] = -1;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = -2 * near * far / dz;\n      dst[15] = 0;\n  \n      return dst;\n    }\n  \n    /**\n     * Makes a translation matrix\n     * @param {number} tx x translation.\n     * @param {number} ty y translation.\n     * @param {number} tz z translation.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function translation(tx, ty, tz, dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = 1;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = 1;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = 1;\n      dst[11] = 0;\n      dst[12] = tx;\n      dst[13] = ty;\n      dst[14] = tz;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by translation matrix.\n     * @param {Matrix4} m matrix to multiply\n     * @param {number} tx x translation.\n     * @param {number} ty y translation.\n     * @param {number} tz z translation.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function translate(m, tx, ty, tz, dst) {\n      // This is the optimized version of\n      // return multiply(m, translation(tx, ty, tz), dst);\n      dst = dst || new MatType(16);\n  \n      var m00 = m[0];\n      var m01 = m[1];\n      var m02 = m[2];\n      var m03 = m[3];\n      var m10 = m[1 * 4 + 0];\n      var m11 = m[1 * 4 + 1];\n      var m12 = m[1 * 4 + 2];\n      var m13 = m[1 * 4 + 3];\n      var m20 = m[2 * 4 + 0];\n      var m21 = m[2 * 4 + 1];\n      var m22 = m[2 * 4 + 2];\n      var m23 = m[2 * 4 + 3];\n      var m30 = m[3 * 4 + 0];\n      var m31 = m[3 * 4 + 1];\n      var m32 = m[3 * 4 + 2];\n      var m33 = m[3 * 4 + 3];\n  \n      if (m !== dst) {\n        dst[ 0] = m00;\n        dst[ 1] = m01;\n        dst[ 2] = m02;\n        dst[ 3] = m03;\n        dst[ 4] = m10;\n        dst[ 5] = m11;\n        dst[ 6] = m12;\n        dst[ 7] = m13;\n        dst[ 8] = m20;\n        dst[ 9] = m21;\n        dst[10] = m22;\n        dst[11] = m23;\n      }\n  \n      dst[12] = m00 * tx + m10 * ty + m20 * tz + m30;\n      dst[13] = m01 * tx + m11 * ty + m21 * tz + m31;\n      dst[14] = m02 * tx + m12 * ty + m22 * tz + m32;\n      dst[15] = m03 * tx + m13 * ty + m23 * tz + m33;\n  \n      return dst;\n    }\n  \n    /**\n     * Makes an x rotation matrix\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function xRotation(angleInRadians, dst) {\n      dst = dst || new MatType(16);\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[ 0] = 1;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = c;\n      dst[ 6] = s;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = -s;\n      dst[10] = c;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by an x rotation matrix\n     * @param {Matrix4} m matrix to multiply\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function xRotate(m, angleInRadians, dst) {\n      // this is the optimized version of\n      // return multiply(m, xRotation(angleInRadians), dst);\n      dst = dst || new MatType(16);\n  \n      var m10 = m[4];\n      var m11 = m[5];\n      var m12 = m[6];\n      var m13 = m[7];\n      var m20 = m[8];\n      var m21 = m[9];\n      var m22 = m[10];\n      var m23 = m[11];\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[4]  = c * m10 + s * m20;\n      dst[5]  = c * m11 + s * m21;\n      dst[6]  = c * m12 + s * m22;\n      dst[7]  = c * m13 + s * m23;\n      dst[8]  = c * m20 - s * m10;\n      dst[9]  = c * m21 - s * m11;\n      dst[10] = c * m22 - s * m12;\n      dst[11] = c * m23 - s * m13;\n  \n      if (m !== dst) {\n        dst[ 0] = m[ 0];\n        dst[ 1] = m[ 1];\n        dst[ 2] = m[ 2];\n        dst[ 3] = m[ 3];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n      }\n  \n      return dst;\n    }\n  \n    /**\n     * Makes an y rotation matrix\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function yRotation(angleInRadians, dst) {\n      dst = dst || new MatType(16);\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[ 0] = c;\n      dst[ 1] = 0;\n      dst[ 2] = -s;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = 1;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = s;\n      dst[ 9] = 0;\n      dst[10] = c;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by an y rotation matrix\n     * @param {Matrix4} m matrix to multiply\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function yRotate(m, angleInRadians, dst) {\n      // this is the optimized version of\n      // return multiply(m, yRotation(angleInRadians), dst);\n      dst = dst || new MatType(16);\n  \n      var m00 = m[0 * 4 + 0];\n      var m01 = m[0 * 4 + 1];\n      var m02 = m[0 * 4 + 2];\n      var m03 = m[0 * 4 + 3];\n      var m20 = m[2 * 4 + 0];\n      var m21 = m[2 * 4 + 1];\n      var m22 = m[2 * 4 + 2];\n      var m23 = m[2 * 4 + 3];\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[ 0] = c * m00 - s * m20;\n      dst[ 1] = c * m01 - s * m21;\n      dst[ 2] = c * m02 - s * m22;\n      dst[ 3] = c * m03 - s * m23;\n      dst[ 8] = c * m20 + s * m00;\n      dst[ 9] = c * m21 + s * m01;\n      dst[10] = c * m22 + s * m02;\n      dst[11] = c * m23 + s * m03;\n  \n      if (m !== dst) {\n        dst[ 4] = m[ 4];\n        dst[ 5] = m[ 5];\n        dst[ 6] = m[ 6];\n        dst[ 7] = m[ 7];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n      }\n  \n      return dst;\n    }\n  \n    /**\n     * Makes an z rotation matrix\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function zRotation(angleInRadians, dst) {\n      dst = dst || new MatType(16);\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[ 0] = c;\n      dst[ 1] = s;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = -s;\n      dst[ 5] = c;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = 1;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by an z rotation matrix\n     * @param {Matrix4} m matrix to multiply\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function zRotate(m, angleInRadians, dst) {\n      // This is the optimized version of\n      // return multiply(m, zRotation(angleInRadians), dst);\n      dst = dst || new MatType(16);\n  \n      var m00 = m[0 * 4 + 0];\n      var m01 = m[0 * 4 + 1];\n      var m02 = m[0 * 4 + 2];\n      var m03 = m[0 * 4 + 3];\n      var m10 = m[1 * 4 + 0];\n      var m11 = m[1 * 4 + 1];\n      var m12 = m[1 * 4 + 2];\n      var m13 = m[1 * 4 + 3];\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n  \n      dst[ 0] = c * m00 + s * m10;\n      dst[ 1] = c * m01 + s * m11;\n      dst[ 2] = c * m02 + s * m12;\n      dst[ 3] = c * m03 + s * m13;\n      dst[ 4] = c * m10 - s * m00;\n      dst[ 5] = c * m11 - s * m01;\n      dst[ 6] = c * m12 - s * m02;\n      dst[ 7] = c * m13 - s * m03;\n  \n      if (m !== dst) {\n        dst[ 8] = m[ 8];\n        dst[ 9] = m[ 9];\n        dst[10] = m[10];\n        dst[11] = m[11];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n      }\n  \n      return dst;\n    }\n  \n    /**\n     * Makes an rotation matrix around an arbitrary axis\n     * @param {Vector3} axis axis to rotate around\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function axisRotation(axis, angleInRadians, dst) {\n      dst = dst || new MatType(16);\n  \n      var x = axis[0];\n      var y = axis[1];\n      var z = axis[2];\n      var n = Math.sqrt(x * x + y * y + z * z);\n      x /= n;\n      y /= n;\n      z /= n;\n      var xx = x * x;\n      var yy = y * y;\n      var zz = z * z;\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n      var oneMinusCosine = 1 - c;\n  \n      dst[ 0] = xx + (1 - xx) * c;\n      dst[ 1] = x * y * oneMinusCosine + z * s;\n      dst[ 2] = x * z * oneMinusCosine - y * s;\n      dst[ 3] = 0;\n      dst[ 4] = x * y * oneMinusCosine - z * s;\n      dst[ 5] = yy + (1 - yy) * c;\n      dst[ 6] = y * z * oneMinusCosine + x * s;\n      dst[ 7] = 0;\n      dst[ 8] = x * z * oneMinusCosine + y * s;\n      dst[ 9] = y * z * oneMinusCosine - x * s;\n      dst[10] = zz + (1 - zz) * c;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by an axis rotation matrix\n     * @param {Matrix4} m matrix to multiply\n     * @param {Vector3} axis axis to rotate around\n     * @param {number} angleInRadians amount to rotate\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function axisRotate(m, axis, angleInRadians, dst) {\n      // This is the optimized version of\n      // return multiply(m, axisRotation(axis, angleInRadians), dst);\n      dst = dst || new MatType(16);\n  \n      var x = axis[0];\n      var y = axis[1];\n      var z = axis[2];\n      var n = Math.sqrt(x * x + y * y + z * z);\n      x /= n;\n      y /= n;\n      z /= n;\n      var xx = x * x;\n      var yy = y * y;\n      var zz = z * z;\n      var c = Math.cos(angleInRadians);\n      var s = Math.sin(angleInRadians);\n      var oneMinusCosine = 1 - c;\n  \n      var r00 = xx + (1 - xx) * c;\n      var r01 = x * y * oneMinusCosine + z * s;\n      var r02 = x * z * oneMinusCosine - y * s;\n      var r10 = x * y * oneMinusCosine - z * s;\n      var r11 = yy + (1 - yy) * c;\n      var r12 = y * z * oneMinusCosine + x * s;\n      var r20 = x * z * oneMinusCosine + y * s;\n      var r21 = y * z * oneMinusCosine - x * s;\n      var r22 = zz + (1 - zz) * c;\n  \n      var m00 = m[0];\n      var m01 = m[1];\n      var m02 = m[2];\n      var m03 = m[3];\n      var m10 = m[4];\n      var m11 = m[5];\n      var m12 = m[6];\n      var m13 = m[7];\n      var m20 = m[8];\n      var m21 = m[9];\n      var m22 = m[10];\n      var m23 = m[11];\n  \n      dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n      dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n      dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n      dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n      dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n      dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n      dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n      dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n      dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n      dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n      dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n      dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n  \n      if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n      }\n  \n      return dst;\n    }\n  \n    /**\n     * Makes a scale matrix\n     * @param {number} sx x scale.\n     * @param {number} sy y scale.\n     * @param {number} sz z scale.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function scaling(sx, sy, sz, dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = sx;\n      dst[ 1] = 0;\n      dst[ 2] = 0;\n      dst[ 3] = 0;\n      dst[ 4] = 0;\n      dst[ 5] = sy;\n      dst[ 6] = 0;\n      dst[ 7] = 0;\n      dst[ 8] = 0;\n      dst[ 9] = 0;\n      dst[10] = sz;\n      dst[11] = 0;\n      dst[12] = 0;\n      dst[13] = 0;\n      dst[14] = 0;\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    /**\n     * Multiply by a scaling matrix\n     * @param {Matrix4} m matrix to multiply\n     * @param {number} sx x scale.\n     * @param {number} sy y scale.\n     * @param {number} sz z scale.\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function scale(m, sx, sy, sz, dst) {\n      // This is the optimized version of\n      // return multiply(m, scaling(sx, sy, sz), dst);\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = sx * m[0 * 4 + 0];\n      dst[ 1] = sx * m[0 * 4 + 1];\n      dst[ 2] = sx * m[0 * 4 + 2];\n      dst[ 3] = sx * m[0 * 4 + 3];\n      dst[ 4] = sy * m[1 * 4 + 0];\n      dst[ 5] = sy * m[1 * 4 + 1];\n      dst[ 6] = sy * m[1 * 4 + 2];\n      dst[ 7] = sy * m[1 * 4 + 3];\n      dst[ 8] = sz * m[2 * 4 + 0];\n      dst[ 9] = sz * m[2 * 4 + 1];\n      dst[10] = sz * m[2 * 4 + 2];\n      dst[11] = sz * m[2 * 4 + 3];\n  \n      if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n      }\n  \n      return dst;\n    }\n  \n    /**\n     * creates a matrix from translation, quaternion, scale\n     * @param {Number[]} translation [x, y, z] translation\n     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\n     * @param {Number[]} scale [x, y, z] scale\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     */\n    function compose(translation, quaternion, scale, dst) {\n      dst = dst || new MatType(16);\n  \n      const x = quaternion[0];\n      const y = quaternion[1];\n      const z = quaternion[2];\n      const w = quaternion[3];\n  \n      const x2 = x + x;\n      const y2 = y + y;\n      const z2 = z + z;\n  \n      const xx = x * x2;\n      const xy = x * y2;\n      const xz = x * z2;\n  \n      const yy = y * y2;\n      const yz = y * z2;\n      const zz = z * z2;\n  \n      const wx = w * x2;\n      const wy = w * y2;\n      const wz = w * z2;\n  \n      const sx = scale[0];\n      const sy = scale[1];\n      const sz = scale[2];\n  \n      dst[0] = (1 - (yy + zz)) * sx;\n      dst[1] = (xy + wz) * sx;\n      dst[2] = (xz - wy) * sx;\n      dst[3] = 0;\n  \n      dst[4] = (xy - wz) * sy;\n      dst[5] = (1 - (xx + zz)) * sy;\n      dst[6] = (yz + wx) * sy;\n      dst[7] = 0;\n  \n      dst[ 8] = (xz + wy) * sz;\n      dst[ 9] = (yz - wx) * sz;\n      dst[10] = (1 - (xx + yy)) * sz;\n      dst[11] = 0;\n  \n      dst[12] = translation[0];\n      dst[13] = translation[1];\n      dst[14] = translation[2];\n      dst[15] = 1;\n  \n      return dst;\n    }\n  \n    function quatFromRotationMatrix(m, dst) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  \n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n      const m11 = m[0];\n      const m12 = m[4];\n      const m13 = m[8];\n      const m21 = m[1];\n      const m22 = m[5];\n      const m23 = m[9];\n      const m31 = m[2];\n      const m32 = m[6];\n      const m33 = m[10];\n  \n      const trace = m11 + m22 + m33;\n  \n      if (trace > 0) {\n        const s = 0.5 / Math.sqrt(trace + 1);\n        dst[3] = 0.25 / s;\n        dst[0] = (m32 - m23) * s;\n        dst[1] = (m13 - m31) * s;\n        dst[2] = (m21 - m12) * s;\n      } else if (m11 > m22 && m11 > m33) {\n        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\n        dst[3] = (m32 - m23) / s;\n        dst[0] = 0.25 * s;\n        dst[1] = (m12 + m21) / s;\n        dst[2] = (m13 + m31) / s;\n      } else if (m22 > m33) {\n        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\n        dst[3] = (m13 - m31) / s;\n        dst[0] = (m12 + m21) / s;\n        dst[1] = 0.25 * s;\n        dst[2] = (m23 + m32) / s;\n      } else {\n        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\n        dst[3] = (m21 - m12) / s;\n        dst[0] = (m13 + m31) / s;\n        dst[1] = (m23 + m32) / s;\n        dst[2] = 0.25 * s;\n      }\n    }\n  \n    function decompose(mat, translation, quaternion, scale) {\n      let sx = m4.length(mat.slice(0, 3));\n      const sy = m4.length(mat.slice(4, 7));\n      const sz = m4.length(mat.slice(8, 11));\n  \n      // if determinate is negative, we need to invert one scale\n      const det = determinate(mat);\n      if (det < 0) {\n        sx = -sx;\n      }\n  \n      translation[0] = mat[12];\n      translation[1] = mat[13];\n      translation[2] = mat[14];\n  \n      // scale the rotation part\n      const matrix = m4.copy(mat);\n  \n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n  \n      matrix[0] *= invSX;\n      matrix[1] *= invSX;\n      matrix[2] *= invSX;\n  \n      matrix[4] *= invSY;\n      matrix[5] *= invSY;\n      matrix[6] *= invSY;\n  \n      matrix[8] *= invSZ;\n      matrix[9] *= invSZ;\n      matrix[10] *= invSZ;\n  \n      quatFromRotationMatrix(matrix, quaternion);\n  \n      scale[0] = sx;\n      scale[1] = sy;\n      scale[2] = sz;\n    }\n  \n    function determinate(m) {\n      var m00 = m[0 * 4 + 0];\n      var m01 = m[0 * 4 + 1];\n      var m02 = m[0 * 4 + 2];\n      var m03 = m[0 * 4 + 3];\n      var m10 = m[1 * 4 + 0];\n      var m11 = m[1 * 4 + 1];\n      var m12 = m[1 * 4 + 2];\n      var m13 = m[1 * 4 + 3];\n      var m20 = m[2 * 4 + 0];\n      var m21 = m[2 * 4 + 1];\n      var m22 = m[2 * 4 + 2];\n      var m23 = m[2 * 4 + 3];\n      var m30 = m[3 * 4 + 0];\n      var m31 = m[3 * 4 + 1];\n      var m32 = m[3 * 4 + 2];\n      var m33 = m[3 * 4 + 3];\n      var tmp_0  = m22 * m33;\n      var tmp_1  = m32 * m23;\n      var tmp_2  = m12 * m33;\n      var tmp_3  = m32 * m13;\n      var tmp_4  = m12 * m23;\n      var tmp_5  = m22 * m13;\n      var tmp_6  = m02 * m33;\n      var tmp_7  = m32 * m03;\n      var tmp_8  = m02 * m23;\n      var tmp_9  = m22 * m03;\n      var tmp_10 = m02 * m13;\n      var tmp_11 = m12 * m03;\n  \n      var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n          (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n      var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n          (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n      var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n          (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n      var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n          (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n  \n      return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n    }\n  \n    /**\n     * Computes the inverse of a matrix.\n     * @param {Matrix4} m matrix to compute inverse of\n     * @param {Matrix4} [dst] optional matrix to store result\n     * @return {Matrix4} dst or a new matrix if none provided\n     * @memberOf module:webgl-3d-math\n     */\n    function inverse(m, dst) {\n      dst = dst || new MatType(16);\n      var m00 = m[0 * 4 + 0];\n      var m01 = m[0 * 4 + 1];\n      var m02 = m[0 * 4 + 2];\n      var m03 = m[0 * 4 + 3];\n      var m10 = m[1 * 4 + 0];\n      var m11 = m[1 * 4 + 1];\n      var m12 = m[1 * 4 + 2];\n      var m13 = m[1 * 4 + 3];\n      var m20 = m[2 * 4 + 0];\n      var m21 = m[2 * 4 + 1];\n      var m22 = m[2 * 4 + 2];\n      var m23 = m[2 * 4 + 3];\n      var m30 = m[3 * 4 + 0];\n      var m31 = m[3 * 4 + 1];\n      var m32 = m[3 * 4 + 2];\n      var m33 = m[3 * 4 + 3];\n      var tmp_0  = m22 * m33;\n      var tmp_1  = m32 * m23;\n      var tmp_2  = m12 * m33;\n      var tmp_3  = m32 * m13;\n      var tmp_4  = m12 * m23;\n      var tmp_5  = m22 * m13;\n      var tmp_6  = m02 * m33;\n      var tmp_7  = m32 * m03;\n      var tmp_8  = m02 * m23;\n      var tmp_9  = m22 * m03;\n      var tmp_10 = m02 * m13;\n      var tmp_11 = m12 * m03;\n      var tmp_12 = m20 * m31;\n      var tmp_13 = m30 * m21;\n      var tmp_14 = m10 * m31;\n      var tmp_15 = m30 * m11;\n      var tmp_16 = m10 * m21;\n      var tmp_17 = m20 * m11;\n      var tmp_18 = m00 * m31;\n      var tmp_19 = m30 * m01;\n      var tmp_20 = m00 * m21;\n      var tmp_21 = m20 * m01;\n      var tmp_22 = m00 * m11;\n      var tmp_23 = m10 * m01;\n  \n      var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n          (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n      var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n          (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n      var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n          (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n      var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n          (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n  \n      var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n  \n      dst[0] = d * t0;\n      dst[1] = d * t1;\n      dst[2] = d * t2;\n      dst[3] = d * t3;\n      dst[4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n            (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n      dst[5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n            (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n      dst[6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n            (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n      dst[7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n            (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n      dst[8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n            (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n      dst[9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n            (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n      dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n            (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n      dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n            (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n      dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n            (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n      dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n            (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n      dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n            (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n      dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n            (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n  \n      return dst;\n    }\n  \n    /**\n     * Takes a  matrix and a vector with 4 entries, transforms that vector by\n     * the matrix, and returns the result as a vector with 4 entries.\n     * @param {Matrix4} m The matrix.\n     * @param {Vector4} v The point in homogenous coordinates.\n     * @param {Vector4} dst optional vector4 to store result\n     * @return {Vector4} dst or new Vector4 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function transformVector(m, v, dst) {\n      dst = dst || new MatType(4);\n      for (var i = 0; i < 4; ++i) {\n        dst[i] = 0.0;\n        for (var j = 0; j < 4; ++j) {\n          dst[i] += v[j] * m[j * 4 + i];\n        }\n      }\n      return dst;\n    }\n  \n    /**\n     * Takes a 4-by-4 matrix and a vector with 3 entries,\n     * interprets the vector as a point, transforms that point by the matrix, and\n     * returns the result as a vector with 3 entries.\n     * @param {Matrix4} m The matrix.\n     * @param {Vector3} v The point.\n     * @param {Vector4} dst optional vector4 to store result\n     * @return {Vector4} dst or new Vector4 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function transformPoint(m, v, dst) {\n      dst = dst || new MatType(3);\n      var v0 = v[0];\n      var v1 = v[1];\n      var v2 = v[2];\n      var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n  \n      dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n      dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n      dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n  \n      return dst;\n    }\n  \n    /**\n     * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n     * direction, transforms that direction by the matrix, and returns the result;\n     * assumes the transformation of 3-dimensional space represented by the matrix\n     * is parallel-preserving, i.e. any combination of rotation, scaling and\n     * translation, but not a perspective distortion. Returns a vector with 3\n     * entries.\n     * @param {Matrix4} m The matrix.\n     * @param {Vector3} v The direction.\n     * @param {Vector4} dst optional vector4 to store result\n     * @return {Vector4} dst or new Vector4 if not provided\n     * @memberOf module:webgl-3d-math\n     */\n    function transformDirection(m, v, dst) {\n      dst = dst || new MatType(3);\n  \n      var v0 = v[0];\n      var v1 = v[1];\n      var v2 = v[2];\n  \n      dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n      dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n      dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n  \n      return dst;\n    }\n  \n    /**\n     * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n     * as a normal to a surface, and computes a vector which is normal upon\n     * transforming that surface by the matrix. The effect of this function is the\n     * same as transforming v (as a direction) by the inverse-transpose of m.  This\n     * function assumes the transformation of 3-dimensional space represented by the\n     * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n     * translation, but not a perspective distortion.  Returns a vector with 3\n     * entries.\n     * @param {Matrix4} m The matrix.\n     * @param {Vector3} v The normal.\n     * @param {Vector3} [dst] The direction.\n     * @return {Vector3} The transformed direction.\n     * @memberOf module:webgl-3d-math\n     */\n    function transformNormal(m, v, dst) {\n      dst = dst || new MatType(3);\n      var mi = inverse(m);\n      var v0 = v[0];\n      var v1 = v[1];\n      var v2 = v[2];\n  \n      dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n      dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n      dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n  \n      return dst;\n    }\n  \n    function copy(src, dst) {\n      dst = dst || new MatType(16);\n  \n      dst[ 0] = src[ 0];\n      dst[ 1] = src[ 1];\n      dst[ 2] = src[ 2];\n      dst[ 3] = src[ 3];\n      dst[ 4] = src[ 4];\n      dst[ 5] = src[ 5];\n      dst[ 6] = src[ 6];\n      dst[ 7] = src[ 7];\n      dst[ 8] = src[ 8];\n      dst[ 9] = src[ 9];\n      dst[10] = src[10];\n      dst[11] = src[11];\n      dst[12] = src[12];\n      dst[13] = src[13];\n      dst[14] = src[14];\n      dst[15] = src[15];\n  \n      return dst;\n    }\n  \n    return {\n      copy: copy,\n      lookAt: lookAt,\n      addVectors: addVectors,\n      subtractVectors: subtractVectors,\n      scaleVector: scaleVector,\n      distance: distance,\n      distanceSq: distanceSq,\n      normalize: normalize,\n      compose: compose,\n      cross: cross,\n      decompose: decompose,\n      dot: dot,\n      identity: identity,\n      transpose: transpose,\n      length: length,\n      lengthSq: lengthSq,\n      orthographic: orthographic,\n      frustum: frustum,\n      perspective: perspective,\n      translation: translation,\n      translate: translate,\n      xRotation: xRotation,\n      yRotation: yRotation,\n      zRotation: zRotation,\n      xRotate: xRotate,\n      yRotate: yRotate,\n      zRotate: zRotate,\n      axisRotation: axisRotation,\n      axisRotate: axisRotate,\n      scaling: scaling,\n      scale: scale,\n      multiply: multiply,\n      inverse: inverse,\n      transformVector: transformVector,\n      transformPoint: transformPoint,\n      transformDirection: transformDirection,\n      transformNormal: transformNormal,\n      setDefaultType: setDefaultType,\n    };\n  \n  }));\n  \n  \n  ", "\"use strict\";\nimport { webglUtils } from \"../webgl-utils.js\";\nimport {m4} from \"../m4.js\";\nconsole.log(m4)\n// This is not a full .obj parser.\n// see http://paulbourke.net/dataformats/obj/\nNumber.prototype.map = function (in_min, in_max, out_min, out_max) {\n  return ((this - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;\n};\nfunction parseOBJ(text) {\n  // because indices are base 1 let's just fill in the 0th data\n  const objPositions = [[0, 0, 0]];\n  const objTexcoords = [[0, 0]];\n  const objNormals = [[0, 0, 0]];\n  const objColors = [[0, 0, 0]];\n\n  // same order as `f` indices\n  const objVertexData = [objPositions, objTexcoords, objNormals, objColors];\n\n  // same order as `f` indices\n  let webglVertexData = [\n    [], // positions\n    [], // texcoords\n    [], // normals\n    [], // colors\n  ];\n\n  const materialLibs = [];\n  const geometries = [];\n  let geometry;\n  let groups = [\"default\"];\n  let material = \"default\";\n  let object = \"default\";\n\n  const noop = () => {};\n\n  function newGeometry() {\n    // If there is an existing geometry and it's\n    // not empty then start a new one.\n    if (geometry && geometry.data.position.length) {\n      geometry = undefined;\n    }\n  }\n\n  function setGeometry() {\n    if (!geometry) {\n      const position = [];\n      const texcoord = [];\n      const normal = [];\n      const color = [];\n      webglVertexData = [position, texcoord, normal, color];\n      geometry = {\n        object,\n        groups,\n        material,\n        data: {\n          position,\n          texcoord,\n          normal,\n          color,\n        },\n      };\n      geometries.push(geometry);\n    }\n  }\n\n  function addVertex(vert) {\n    const ptn = vert.split(\"/\");\n    ptn.forEach((objIndexStr, i) => {\n      if (!objIndexStr) {\n        return;\n      }\n      const objIndex = parseInt(objIndexStr);\n      const index = objIndex + (objIndex >= 0 ? 0 : objVertexData[i].length);\n      webglVertexData[i].push(...objVertexData[i][index]);\n      // if this is the position index (index 0) and we parsed\n      // vertex colors then copy the vertex colors to the webgl vertex color data\n      if (i === 0 && objColors.length > 1) {\n        geometry.data.color.push(...objColors[index]);\n      }\n    });\n  }\n\n  const keywords = {\n    v(parts) {\n      // if there are more than 3 values here they are vertex colors\n      if (parts.length > 3) {\n        objPositions.push(parts.slice(0, 3).map(parseFloat));\n        objColors.push(parts.slice(3).map(parseFloat));\n      } else {\n        objPositions.push(parts.map(parseFloat));\n      }\n    },\n    vn(parts) {\n      objNormals.push(parts.map(parseFloat));\n    },\n    vt(parts) {\n      // should check for missing v and extra w?\n      objTexcoords.push(parts.map(parseFloat));\n    },\n    f(parts) {\n      setGeometry();\n      const numTriangles = parts.length - 2;\n      for (let tri = 0; tri < numTriangles; ++tri) {\n        addVertex(parts[0]);\n        addVertex(parts[tri + 1]);\n        addVertex(parts[tri + 2]);\n      }\n    },\n    s: noop, // smoothing group\n    mtllib(parts, unparsedArgs) {\n      // the spec says there can be multiple filenames here\n      // but many exist with spaces in a single filename\n      materialLibs.push(unparsedArgs);\n    },\n    usemtl(parts, unparsedArgs) {\n      material = unparsedArgs;\n      newGeometry();\n    },\n    g(parts) {\n      groups = parts;\n      newGeometry();\n    },\n    o(parts, unparsedArgs) {\n      object = unparsedArgs;\n      newGeometry();\n    },\n  };\n\n  const keywordRE = /(\\w*)(?: )*(.*)/;\n  const lines = text.split(\"\\n\");\n  for (let lineNo = 0; lineNo < lines.length; ++lineNo) {\n    const line = lines[lineNo].trim();\n    if (line === \"\" || line.startsWith(\"#\")) {\n      continue;\n    }\n    const m = keywordRE.exec(line);\n    if (!m) {\n      continue;\n    }\n    const [, keyword, unparsedArgs] = m;\n    const parts = line.split(/\\s+/).slice(1);\n    const handler = keywords[keyword];\n    if (!handler) {\n      console.warn(\"unhandled keyword:\", keyword); // eslint-disable-line no-console\n      continue;\n    }\n    handler(parts, unparsedArgs);\n  }\n\n  // remove any arrays that have no entries.\n  for (const geometry of geometries) {\n    geometry.data = Object.fromEntries(\n      Object.entries(geometry.data).filter(([, array]) => array.length > 0)\n    );\n  }\n\n  return {\n    geometries,\n    materialLibs,\n  };\n}\nfunction easeInSine(x) {\n  return 1 - cos((x * PI) / 2);\n}\nasync function main() {\n  // Get A WebGL context\n  /** @type {HTMLCanvasElement} */\n  const canvas = document.querySelector(\"#canvas\");\n  const gl = canvas.getContext(\"webgl\");\n  if (!gl) {\n    return;\n  }\n\n  const vs = `\n  attribute vec4 a_position;\n  attribute vec3 a_normal;\n  attribute vec4 a_color;\n  attribute vec2 texCoord;\n \n  varying vec2 texCoordV;\n\n  uniform mat4 u_projection;\n  uniform mat4 u_view;\n  uniform mat4 u_world;\n\n  varying vec3 v_normal;\n  varying vec4 v_color;\n\n  void main() {\n    gl_Position = u_projection * u_view * u_world * a_position;\n    texCoordV = texCoord;\n    v_normal = mat3(u_world) * a_normal;\n    v_color = a_color;\n  }\n  `;\n\n  const fs = `\n  precision highp float;\n\n  varying vec3 v_normal;\n  varying vec4 v_color;\n  varying vec2 texCoordV;\n\n  uniform vec4 u_diffuse;\n  uniform vec3 u_lightDirection;\n  \n  uniform vec2 u_mouse;\n  uniform float u_height;\n  uniform float u_time;\n  uniform vec2 u_resolution;\n  mat3 yuv2rgb = mat3(0.7, 0.0, 1.13983,\n    1.0, -0.39465, -0.58060,\n    1.0, 2.03211, 0.0);\n\n  // RGB to YUV matrix\n  mat3 rgb2yuv = mat3(0.2126, 0.7152, 0.0722,\n      -0.09991, -0.33609, 0.43600,\n      0.615, -0.5586, -0.05639);\n\n  void main(){\n    vec3 normal = normalize(v_normal);\n    vec2 st = gl_FragCoord.xy/u_resolution * normal.z;\n    vec3 color = vec3(0.0);\n\n    // UV values goes from -1 to 1\n    // So we need to remap st (0.0 to 1.0)\n    st -= 0.5;  // becomes -0.5 to 0.5\n    st *= 2.0;  // becomes -1.0 to 1.0\n\n    // we pass st as the y & z values of\n    // a three dimensional vector to be\n    // properly multiply by a 3x3 matrix\n    color = yuv2rgb * vec3(abs(sin(u_time * 0.5)), st.x * (u_height + 1.0), 0.1);\n\n    gl_FragColor = vec4(color,1.0);\n  }\n    \n  `;\n\n  let resize = function (t, h) {\n    gl.canvas.width = 0 + window.scrollY.map(0, h, 1440, 1075);\n    gl.canvas.height = 0 + window.scrollY.map(0, h, 692, 516.96);\n    document.getElementById(\"number_purple\").innerHTML =\n      t >= 15 ? `${t}s or ${t - 15}s longer than average` : `${t}s`;\n  };\n  document.getElementById(\"number_red\").innerHTML = `${\n    (window.performance.timing.domContentLoadedEventEnd -\n      window.performance.timing.navigationStart) /\n    1000\n  }s`;\n  // compiles and links the shaders, looks up attribute and uniform locations\n  const meshProgramInfo = webglUtils.createProgramInfo(gl, [vs, fs]);\n\n  const response = await fetch(\"/GL/iphone11.txt\");\n  const text = await response.text();\n  const obj = parseOBJ(text);\n\n  const parts = obj.geometries.map(({ data }) => {\n    // Because data is just named arrays like this\n    //\n    // {\n    //   position: [...],\n    //   texcoord: [...],\n    //   normal: [...],\n    // }\n    //\n    // and because those names match the attributes in our vertex\n    // shader we can pass it directly into `createBufferInfoFromArrays`\n    // from the article \"less code more fun\".\n\n    if (data.color) {\n      if (data.position.length === data.color.length) {\n        // it's 3. The our helper library assumes 4 so we need\n        // to tell it there are only 3.\n        data.color = { numComponents: 3, data: data.color };\n      }\n    } else {\n      // there are no vertex colors so just use constant white\n      data.color = { value: [1, 1, 1, 1] };\n    }\n\n    // create a buffer for each array by calling\n    // gl.createBuffer, gl.bindBuffer, gl.bufferData\n    const bufferInfo = webglUtils.createBufferInfoFromArrays(gl, data);\n    return {\n      material: {\n        u_diffuse: [1, 1, 1, 1],\n      },\n      bufferInfo,\n    };\n  });\n\n  function getExtents(positions) {\n    const min = positions.slice(0, 3);\n    const max = positions.slice(0, 3);\n    for (let i = 3; i < positions.length; i += 3) {\n      for (let j = 0; j < 3; ++j) {\n        const v = positions[i + j];\n        min[j] = Math.min(v, min[j]);\n        max[j] = Math.max(v, max[j]);\n      }\n    }\n    return { min, max };\n  }\n\n  function getGeometriesExtents(geometries) {\n    return geometries.reduce(\n      ({ min, max }, { data }) => {\n        const minMax = getExtents(data.position);\n        return {\n          min: min.map((min, ndx) => Math.min(minMax.min[ndx], min)),\n          max: max.map((max, ndx) => Math.max(minMax.max[ndx], max)),\n        };\n      },\n      {\n        min: Array(3).fill(Number.POSITIVE_INFINITY),\n        max: Array(3).fill(Number.NEGATIVE_INFINITY),\n      }\n    );\n  }\n\n  const extents = getGeometriesExtents(obj.geometries);\n  const range = m4.subtractVectors(extents.max, extents.min);\n  // amount to move the object so its center is at the origin\n  const objOffset = m4.scaleVector(\n    m4.addVectors(extents.min, m4.scaleVector(range, 0.5)),\n    -1\n  );\n  let cameraTarget = [-0.1, 0.05, 0];\n  // figure out how far away to move the camera so we can likely\n  // see the object.\n  const radius = m4.length(range) * 1.2;\n  // Set zNear and zFar to something hopefully appropriate\n  // for the size of this object.\n  const zNear = radius / 100;\n  const zFar = radius * 3;\n  let mouse = new Float32Array(2);\n  const resolutionLocation = gl.getUniformLocation(\n    meshProgramInfo.program,\n    \"u_resolution\"\n  );\n\n  function degToRad(deg) {\n    return (deg * Math.PI) / 180;\n  }\n  function render(time) {\n    time *= 0.001; // convert to seconds\n    let height =\n      Math.max(\n        document.body.scrollHeight,\n        document.body.offsetHeight,\n        document.documentElement.clientHeight,\n        document.documentElement.scrollHeight,\n        document.documentElement.offsetHeight\n      ) - window.innerHeight;\n\n    (function () {\n      document.onmousemove = handleMouseMove;\n      function handleMouseMove(event) {\n        var eventDoc, doc, body;\n        event = event || window.event; // IE-ism\n        // If pageX/Y aren't available and clientX/Y are,\n        // calculate pageX/Y - logic taken from jQuery.\n        // (This is to support old IE)\n        if (event.pageX == null && event.clientX != null) {\n          eventDoc = (event.target && event.target.ownerDocument) || document;\n          doc = eventDoc.documentElement;\n          body = eventDoc.body;\n          event.pageX =\n            event.clientX +\n            ((doc && doc.scrollLeft) || (body && body.scrollLeft) || 0) -\n            ((doc && doc.clientLeft) || (body && body.clientLeft) || 0);\n          event.pageY =\n            event.clientY +\n            ((doc && doc.scrollTop) || (body && body.scrollTop) || 0) -\n            ((doc && doc.clientTop) || (body && body.clientTop) || 0);\n        }\n        mouse[0] = event.pageX * 0.001;\n        mouse[1] = event.pageY * 0.001;\n      }\n    })();\n    const cameraPosition = m4.addVectors(cameraTarget, [\n      0,\n      0,\n      radius - window.scrollY.map(0, height, 0, 1.89),\n    ]);\n    Math.floor(time * 2) % 2 === 0 ? resize(Math.floor(time), height) : false;\n    // setInterval(function () { resize() }, 2000)\n\n    // webglUtils.resizeCanvasToDisplaySize(gl.canvas);\n    gl.viewport(0.0, 0.0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.enable(gl.DEPTH_TEST);\n    gl.clearColor(0.067, 0.075, 0.11, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    const fieldOfViewRadians = degToRad(60);\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n    const projection = m4.perspective(fieldOfViewRadians, aspect, zNear, zFar);\n\n    const up = [0, 1, 0];\n    // Compute the camera's matrix using look at.\n    const camera = m4.lookAt(cameraPosition, cameraTarget, up);\n\n    // Make a view matrix from the camera matrix.\n    const view = m4.inverse(camera);\n\n    const sharedUniforms = {\n      u_lightDirection: m4.normalize([-1, 2, 5]),\n      u_view: view,\n      u_projection: projection,\n      u_time: time,\n      u_height: window.scrollY.map(0, height, 0, 1.0),\n      u_mouse: mouse,\n    };\n\n    gl.useProgram(meshProgramInfo.program);\n    gl.uniform2f(resolutionLocation, gl.canvas.width, gl.canvas.height);\n    // console.log(mouse)\n    // calls gl.uniform\n    webglUtils.setUniforms(meshProgramInfo, sharedUniforms);\n\n    // compute the world matrix once since all parts\n    // are at the same space.\n    // console.log(mousePos)\n    let u_world = m4.multiply(\n      m4.yRotation(window.scrollY.map(0, height, 0, 6.5) + mouse[0] * 0.15),\n      m4.xRotation(mouse[1] * 0.1)\n    );\n    u_world = m4.translate(u_world, ...objOffset);\n\n    for (const { bufferInfo, material } of parts) {\n      // calls gl.bindBuffer, gl.enableVertexAttribArray, gl.vertexAttribPointer\n      webglUtils.setBuffersAndAttributes(gl, meshProgramInfo, bufferInfo);\n      // calls gl.uniform\n      webglUtils.setUniforms(meshProgramInfo, {\n        u_world,\n        u_diffuse: material.u_diffuse,\n      });\n      // calls gl.drawArrays or gl.drawElements\n      webglUtils.drawBufferInfo(gl, bufferInfo);\n    }\n\n    requestAnimationFrame(render);\n  }\n  requestAnimationFrame(render);\n}\n\nmain();\n"],
  "mappings": "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",
  "names": []
}
